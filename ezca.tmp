c SCILAB function : ezcaGet, fin = 1
       subroutine intsezcaGet(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       lbuf = 1
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,2)) return
       if(.not.checklhs(fname,1,2)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c       checking variable type (number 2)
c       
       if(rhs .le. 1) then
        top = top+1
        rhs = rhs+1
        nlr2 = 6
        if(.not.cresmat2(fname,top,nlr2,lr2)) return
        call cvstr(nlr2,istk(lr2),'double',0)
       endif
       if(.not.getsmat(fname,top,top-rhs+2,m2,n2,1,1,lr2,nlr2)) return
       if(.not.checkval(fname,m2*n2,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.bufstore(fname,lbuf,lbufi3,lbuff3,lr2,nlr2)) return
       if(.not.cremat(fname,top+2,0,1,1,lw4,lwc4)) return
       if(.not.cremat(fname,top+3,1,1,1,lw7,lwc7)) return
       call ezget(stk(lw1),m1,buf(lbufi3:lbuff3),stk(lw4),me6,ne6,stk(lw
     $ 7),stk(lwc7),it9,ne9)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+3
c     
       if(lhs .ge. 1) then
c       --------------output variable: res
        top=topl+1
        if(.not.cremat(fname,top,0,me6,ne6,lrs,lcs)) return
        call cdoublef(me6*ne6,stk(lw4),stk(lrs))
       endif
c     
       if(lhs .ge. 2) then
c       --------------output variable: ts
        top=topl+2
        if(.not.cremat(fname,top,it9,me6,ne9,lrs,lcs)) return
        call cts_stampf(me6*ne9,stk(lw7),stk(lrs))
        if  (it9.eq.1) then 
         call cts_stampf(me6*ne9,stk(lwc7),stk(lcs))
        endif
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       if(lhs .ge. 2) then
        call copyobj(fname,topl+2,topk+2)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetString, fin = 2
       subroutine intsezcaGetString(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,2)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.crepointer(fname,top+2,lw3)) return
       if(.not.cremat(fname,top+3,1,1,1,lw6,lwc6)) return
       call ezgetstring(stk(lw1),m1,stk(lw3),me7,nn3,stk(lw6),stk(lwc6),
     $ it7,ne7)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+3
c     
       if(lhs .ge. 1) then
c       --------------output variable: res
        top=topl+1
        if(.not.crestringmatfromC(fname,top,lw3,me7,nn3)) return
       endif
c     
       if(lhs .ge. 2) then
c       --------------output variable: ts
        top=topl+2
        if(.not.cremat(fname,top,it7,me7,ne7,lrs,lcs)) return
        call cts_stampf(me7*ne7,stk(lw6),stk(lrs))
        if  (it7.eq.1) then 
         call cts_stampf(me7*ne7,stk(lwc6),stk(lcs))
        endif
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       if(lhs .ge. 2) then
        call copyobj(fname,topl+2,topk+2)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaPut, fin = 3
       subroutine intsezcaPut(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       lbuf = 1
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,2,3)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c       checking variable val (number 2)
c       
       if(.not.getmat(fname,top,top-rhs+2,it2,m2,n2,lr2,lc2)) return
c       checking variable type (number 3)
c       
       if(rhs .le. 2) then
        top = top+1
        rhs = rhs+1
        nlr3 = 6
        if(.not.cresmat2(fname,top,nlr3,lr3)) return
        call cvstr(nlr3,istk(lr3),'double',0)
       endif
       if(.not.getsmat(fname,top,top-rhs+3,m3,n3,1,1,lr3,nlr3)) return
       if(.not.checkval(fname,m3*n3,1)) return
c     
c       cross variable size checking
c     
       if(.not.checkval(fname,m1,m2)) return
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.bufstore(fname,lbuf,lbufi3,lbuff3,lr3,nlr3)) return
       call ezput(stk(lw1),m1,buf(lbufi3:lbuff3),stk(lr2),n2)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+1
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaPutString, fin = 4
       subroutine intsezcaPutString(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,2,2)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c       checking variable val (number 2)
c       
       if(.not.getsmat(fname,top,top-rhs+2,m2,n2,1,1,lr2,nlr2)) return
c     
c       cross variable size checking
c     
       if(.not.checkval(fname,m1,m2)) return
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.crestringv(fname,top+2,lr2-5-m2*n2,lw3)) return
       call ezputstring(stk(lw1),m1,stk(lw3),n2)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+2
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaGetNelem, fin = 5
       subroutine intsezcaGetNelem(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.cremat(fname,top+2,0,1,1,lw3,loc3)) return
       call ezgetnelem(stk(lw1),m1,stk(lw3),ne4)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+2
c     
       if(lhs .ge. 1) then
c       --------------output variable: n
        top=topl+1
        if(.not.cremat(fname,top,0,ne4,1,lrs,lcs)) return
        call cintf(ne4*1,stk(lw3),stk(lrs))
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetControlLimits, fin = 6
       subroutine intsezcaGetControlLimits(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,2)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.cremat(fname,top+2,0,1,1,lw3,loc3)) return
       if(.not.cremat(fname,top+3,0,1,1,lw4,loc4)) return
       call ezgetcontrollimits(stk(lw1),m1,stk(lw3),stk(lw4),ne4)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+3
c     
       if(lhs .ge. 1) then
c       --------------output variable: lo
        top=topl+1
        if(.not.cremat(fname,top,0,ne4,1,lrs,lcs)) return
        call cdoublef(ne4*1,stk(lw3),stk(lrs))
       endif
c     
       if(lhs .ge. 2) then
c       --------------output variable: hi
        top=topl+2
        if(.not.cremat(fname,top,0,ne4,1,lrs,lcs)) return
        call cdoublef(ne4*1,stk(lw4),stk(lrs))
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       if(lhs .ge. 2) then
        call copyobj(fname,topl+2,topk+2)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetGraphicLimits, fin = 7
       subroutine intsezcaGetGraphicLimits(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,2)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.cremat(fname,top+2,0,1,1,lw3,loc3)) return
       if(.not.cremat(fname,top+3,0,1,1,lw4,loc4)) return
       call ezgetgraphiclimits(stk(lw1),m1,stk(lw3),stk(lw4),ne4)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+3
c     
       if(lhs .ge. 1) then
c       --------------output variable: lo
        top=topl+1
        if(.not.cremat(fname,top,0,ne4,1,lrs,lcs)) return
        call cdoublef(ne4*1,stk(lw3),stk(lrs))
       endif
c     
       if(lhs .ge. 2) then
c       --------------output variable: hi
        top=topl+2
        if(.not.cremat(fname,top,0,ne4,1,lrs,lcs)) return
        call cdoublef(ne4*1,stk(lw4),stk(lrs))
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       if(lhs .ge. 2) then
        call copyobj(fname,topl+2,topk+2)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetStatus, fin = 8
       subroutine intsezcaGetStatus(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,3)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.cremat(fname,top+2,1,1,1,lw3,lwc3)) return
       if(.not.cremat(fname,top+3,0,1,1,lw5,loc5)) return
       if(.not.cremat(fname,top+4,0,1,1,lw6,loc6)) return
       call ezgetstatus(stk(lw1),m1,stk(lw3),stk(lwc3),it4,ne4,stk(lw5),
     $ stk(lw6),me4)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+4
c     
       if(lhs .ge. 1) then
c       --------------output variable: svr
        top=topl+1
        if(.not.cremat(fname,top,0,me4,1,lrs,lcs)) return
        call cshortf(me4*1,stk(lw6),stk(lrs))
       endif
c     
       if(lhs .ge. 2) then
c       --------------output variable: sta
        top=topl+2
        if(.not.cremat(fname,top,0,me4,1,lrs,lcs)) return
        call cshortf(me4*1,stk(lw5),stk(lrs))
       endif
c     
       if(lhs .ge. 3) then
c       --------------output variable: ts
        top=topl+3
        if(.not.cremat(fname,top,it4,me4,ne4,lrs,lcs)) return
        call cts_stampf(me4*ne4,stk(lw3),stk(lrs))
        if  (it4.eq.1) then 
         call cts_stampf(me4*ne4,stk(lwc3),stk(lcs))
        endif
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       if(lhs .ge. 2) then
        call copyobj(fname,topl+2,topk+2)
       endif
       if(lhs .ge. 3) then
        call copyobj(fname,topl+3,topk+3)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetPrecision, fin = 9
       subroutine intsezcaGetPrecision(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.cremat(fname,top+2,0,1,1,lw3,loc3)) return
       call ezgetprecision(stk(lw1),m1,stk(lw3),ne4)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+2
c     
       if(lhs .ge. 1) then
c       --------------output variable: prec
        top=topl+1
        if(.not.cremat(fname,top,0,ne4,1,lrs,lcs)) return
        call cshortf(ne4*1,stk(lw3),stk(lrs))
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetUnits, fin = 10
       subroutine intsezcaGetUnits(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable nms (number 1)
c       
       if(.not.getsmat(fname,top,top-rhs+1,m1,n1,1,1,lr1,nlr1)) return
       if(.not.checkval(fname,n1,1)) return
c     
c       cross variable size checking
c     
       if(.not.crestringv(fname,top+1,lr1-5-m1*n1,lw1)) return
       if(.not.crepointer(fname,top+2,lw3)) return
       call ezgetunits(stk(lw1),m1,stk(lw3),mm3)
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+2
c     
       if(lhs .ge. 1) then
c       --------------output variable: units
        top=topl+1
        if(.not.crestringmatfromC(fname,top,lw3,mm3,n1)) return
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaGetRetryCount, fin = 11
       subroutine intsezcaGetRetryCount(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,0,0)) return
       if(.not.checklhs(fname,1,1)) return
c     
c       cross variable size checking
c     
       if(.not.cremat(fname,top+1,0,1,1,lw1,loc1)) return
       call ezgetretrycount(stk(lw1))
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+1
c     
       if(lhs .ge. 1) then
c       --------------output variable: res
        top=topl+1
        if(.not.cremat(fname,top,0,1,1,lrs,lcs)) return
        call int2db(1*1,istk(iadr(lw1)),-1,stk(lrs),-1)
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaSetRetryCount, fin = 12
       subroutine intsezcaSetRetryCount(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable count (number 1)
c       
       if(.not.getscalar(fname,top,top-rhs+1,lr1)) return
c     
c       cross variable size checking
c     
       call entier(1,stk(lr1),istk(iadr(lr1)))
       call ezsetretrycount(istk(iadr(lr1)))
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+0
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaGetTimeout, fin = 13
       subroutine intsezcaGetTimeout(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,0,0)) return
       if(.not.checklhs(fname,1,1)) return
c     
c       cross variable size checking
c     
       if(.not.cremat(fname,top+1,0,1,1,lw1,loc1)) return
       call ezgettimeout(stk(lw1))
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+1
c     
       if(lhs .ge. 1) then
c       --------------output variable: res
        top=topl+1
        if(.not.cremat(fname,top,0,1,1,lrs,lcs)) return
        call rea2db(1*1,stk(lw1),-1,stk(lrs),-1)
       endif
c     Putting in order the stack
       if(lhs .ge. 1) then
        call copyobj(fname,topl+1,topk+1)
       endif
       top=topk+lhs
       return
       end
c
c SCILAB function : ezcaSetTimeout, fin = 14
       subroutine intsezcaSetTimeout(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable tout (number 1)
c       
       if(.not.getscalar(fname,top,top-rhs+1,lr1)) return
c     
c       cross variable size checking
c     
       call simple(1,stk(lr1),stk(lr1))
       call ezsettimeout(stk(lr1))
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+0
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaDebugOn, fin = 15
       subroutine intsezcaDebugOn(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,0,0)) return
       if(.not.checklhs(fname,1,1)) return
c     
c       cross variable size checking
c     
       call ezdebugon()
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+0
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaDebugOff, fin = 16
       subroutine intsezcaDebugOff(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,0,0)) return
       if(.not.checklhs(fname,1,1)) return
c     
c       cross variable size checking
c     
       call ezdebugoff()
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+0
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaSetSeverityWarnLevel, fin = 17
       subroutine intsezcaSetSeverityWarnLevel(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,1,1)) return
       if(.not.checklhs(fname,1,1)) return
c       checking variable level (number 1)
c       
       if(.not.getscalar(fname,top,top-rhs+1,lr1)) return
c     
c       cross variable size checking
c     
       call entier(1,stk(lr1),istk(iadr(lr1)))
       call ezsetseveritywarnlevel(istk(iadr(lr1)))
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+0
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
c SCILAB function : ezcaLibInit, fin = 18
       subroutine intsezcaLibInit(fname)
c
       character*(*) fname
       include 'SCIDIR/routines/stack.h'
c
       integer iadr, sadr
       iadr(l)=l+l-1
       sadr(l)=(l/2)+1
       rhs = max(0,rhs)
c
       topk = top 
       rhsk = rhs 
       if(.not.checkrhs(fname,0,0)) return
       if(.not.checklhs(fname,1,1)) return
c     
c       cross variable size checking
c     
       call ezlibinit()
       if(err .gt. 0 .or. err1 .gt. 0) return 
c
       topk=top-rhs
       topl=top+0
c       no output variable
       top=topk+1
       call objvide(fname,top)
       return
       end
c
