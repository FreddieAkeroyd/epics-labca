 labca_2_0_alpha (T.S, 2004/6/23):

LINUX/MATLAB PECULARITIES:

MATLAB Version 7.0.0.14092 (R14) Prerelease, dated February 23, 2004:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    The explanations below regarding C++ exceptions / mexErrMsgTxt()
    still apply. Some details differ, however.
    a) exception throwing is in libstdc++.so
    b) THE FIX IS DIFFERENT - setting LDPATH_PREFIX from a
       user initialization script no longer works. 

    Here's what you want and can do: You want the C-library
    (glibc), libgcc, libstdc++, EPICS, labca  and, ideally,
    MATLAB to be compiled with the same compiler. Usually, MATLAB
    supports specific versions of gcc and glibc as listed on
    their website.
    This is sometimes not enough, however, since there might be
    slight differences in the compiler setup chosen by your distro.
    Also, it might be possible to get things to work with slight
    differences in versions of the libraries. YMMV.

    Here's what I discovered on the RH enterprise systems at SLAC:

      A)  installed glibc's exception handling does NOT MATCH
          libstdc++/libgcc as shipped with MATLAB.

      B)  system gcc-3.2.3 's versions of libstdc++/libgcc DO
          WORK. MATLAB must be forced to use those libraries
          however:
           1) the sysadmin could remove MATLAB's versions
              under $MATLABDIR/sys/os/glnx86. Ideally they
              could be replaced by symlinks to working versions.
           2) If you are not the sysadmin and it's midnight,
              you can use the 'LD_PRELOAD' environment variable.
              List the absolute pathnames of the good libgcc and libstdc++
              libraries:
                setenv LD_PRELOAD xxx/libgcc_s.so:yyy/libstdc++.so
              This instructs the run-time system to load the good
              libraries prior to executing MATLAB which then finds
              the stuff it needs and it won't try to load it's own
              library versions.
			  As it is the case with similar variables, LD_PRELOAD
              must be set prior to launching matlab.


MATLAB-14beta2 notes:
- - - - - - - - - - -
	I experienced labca crash matlab 14beta2 on linux (RH9)
    when an lcaXXX Routine flags an error condition (i.e. aborts
    the MEX file by calling mexErrMsgTxt()).

    Matlab 14beta2 uses C++ exceptions to implement error handling.
	Exception handling (simplified) requires the 'exception throwing' 
    code to match the 'exception handling' pieces.

	Unfortunately, Matlab comes with its own versions of some system
    libraries which are quite old. They are located in the
    'sys/os/glnx' subdirectory. 

    Matlab always uses the C-library (glibc) installed on the system.
    This means that the exception handling (stack unwinding) method
    used by the system's glibc is to be used.

    However, Matlab comes with it's own 'libgcc_s.so.1' which is where
    exception throwing is actually implemented.

	If libgcc and glibc don't match, something goes wrong. What happens
    is that the (newer) glibc uses a different method of stack unwinding
    than libgcc knows of dealing with.  libgcc expects an 'exception frame'
    to be registered - a step that is omitted by glibc because it deals
    with exceptions in a different way -- the result being that no
    exception handler will be found and the program aborts.

	FIX: Your system should come with a correct libgcc_s.so.1. In my case
    (RH9) I found it in '/lib'. Here's how you can make matlab to pick up
    the correct one (better solution would have the sysadmin remove the
    outdated version in sys/os/glnx):

	In your $HOME/.matlab6rc.sh file, add
		LDPATH_PREFIX=/lib

   	if you have no $HOME/.matlab6rc.sh, you use the following snippet:
#
# usage:        .matlab6rc.sh
#
. $MATLABdefault/bin/.matlab6rc.sh
LDPATH_PREFIX=/lib
	note that the initial comment lines are important since matlab checks
    for their presence.
